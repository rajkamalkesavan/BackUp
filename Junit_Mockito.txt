@Test
@Disabled("")
@DisplayName("")

--> Live Templates for test Method   - need to know - need to setup in IDE

@valueSource(int ={3,4,8,14})
@ParameterizedTest(name= "{0}")
@Nested



-------------- 26-06-2021

@Before  - Junit 4
@BeforeEach - Junit 5



JUnit 5 Alert
This course works with JUNIT 4 and JUNIT 5.

BOOKMARK OUR GITHUB REPO : https://github.com/in28minutes/spring-unit-testing-with-junit-and-mockito



If you are using JUnit 5, in the next lecture use

@ExtendWith(MockitoExtension.class)

instead of @RunWith(MockitoJUnitRunner.class)

JUnit 5 Commit Changes: https://github.com/in28minutes/spring-unit-testing-with-junit-and-mockito/commit/2c6df429aec248d455b7ad19e60e90743979ba1c

JUnit 5 Reference:


@InjectMocks
@Mock
@RunWith(MockitoJUnitRunner.class)
when - need to more to understand.



 static methods in mockito:
 --------------------------
verify()
times()
atLeast()
atLeastOne()
atMost()
never()


Argument Capture:
------------------

1. ArgumentCaptor<String>


Argument capture multiple calls:
----------------------------------

getAllValuees();


Introduction to spy:  (This is like real performance for collections)
-------------------

spy()


-------------------
@RunWith(SpringRunner.class)
@WebMvcTest(HelloWorldController.class)
@MockMvc


static methods:
---------------
content().string();
status()isOk();
content.json();  - need to study more to understand

JSON Assert:
------------
JSONAssert.assertEquals();  - with some parameter has


----------------

@MockBean



JUnit 5 Alert
This course works with JUNIT 4 and JUNIT 5

BOOKMARK OUR GITHUB REPO : https://github.com/in28minutes/spring-unit-testing-with-junit-and-mockito



(If you are using JUnit 5) In the next lecture, You do NOT need to add

@RunWith(SpringRunner.class) on top of

@DataJpaTest



JUnit 4 Code
@RunWith(SpringRunner.class)

@DataJpaTest



JUnit 5 Code
@DataJpaTest



JUnit 5 Commit Changes: https://github.com/in28minutes/spring-unit-testing-with-junit-and-mockito/commit/2c6df429aec248d455b7ad19e60e90743979ba1c

JUnit 5 Reference:


@RunWith(SpringRunner.class)
@DtaJpaTest

JUnit 5 Alert
This course works with JUNIT 4 and JUNIT 5

BOOKMARK OUR GITHUB REPO : https://github.com/in28minutes/spring-unit-testing-with-junit-and-mockito



(If you are using JUnit 5) In the next lecture, You do NOT need to add

@RunWith(SpringRunner.class) on top of

@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)



JUnit 4 Code
@RunWith(SpringRunner.class)

@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)

JUnit 5 Code
@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)



JUnit 5 Commit Changes: https://github.com/in28minutes/spring-unit-testing-with-junit-and-mockito/commit/2c6df429aec248d455b7ad19e60e90743979ba1c

JUnit 5 Reference:



Integration Test:
------------------

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)

@TestPropertySource(locations={"classpath:test-configuration.properties"})


Hamcrest:
---------

asserThat()  with two parameters

hasSize(3)
hasItems(12,45)
everyItem(greaterThan(10))
everyItem(lessThan(100))
isEmptyString()
containsString("BCD")
startsWith("ABC")
endsWith("CDE")


AssertJ:
--------

assertThat() - there is no second parameter.  this is like chaining flow contains.
asserThat().hasSize(3)contains(12,45).allMatch(x -> x > 10).allMatch(x -> x < 10).nonMatch(x -> x < 0);
assertThat("").isEmpty();
assertThat("ABCDE").contains("BCD")..startWith("ABC").ebndWith("CDE");

asserThat(ids).containsExactly(10000,10001,10002);



Better Assertions with JSONPath - JSONPathTest:
-----------------------------------------------
Json.parse()   - DocumentContext - context.read("$.length()")



xunitPattern:  (http://xunitpatterns.com/)
--------------


Coverage:
---------

This some more important for how much persentage code is covering for test

Steps for Unit Test:
---------------------

Readable
Fast
Isolated
Run Often






IntelliJ Idea's vides:
----------------------
Assertions.assertAll();

Assumptions.assumeTrue(Fixture.apiVersion()>10));  -> These ttest only apply to a recent API version like (java version)


Data Driven Test:
-----------------

@ValueSource(ints = )
assertThrows();
AssertEquals();
assertNotEquals();
assertFalse();




Intellij Idea from Junit 4 to Junit 5:
--------------------------------------



regular expression to search with import class in find in path window (import)


IntelliJ idea Coverage:
------------------------

import org.junit.[A-Z]



Mockito:
---------
@Mock
@InjectMocks
@ExtendWith(MockitoExtension.class)

@ParameterizedTest
@ValueSources(String={"level","madam"})

@NullSource
@EmptySource

@MethodSource("numbreToMonth")  -> fully qualified based on that we can give to any class method.

@ArgumentSource(MonthNamesProvider.class)

@CsvSource({})

@CsvFileSource(resources =  /tasks.csv)

asserNull();


@ConvertWith()

@AggregateWith()



